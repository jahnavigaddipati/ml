tanmaysinghal@TANMAYs-MBP CS6375_SceneRecognition % conda activate deep-learning-scene-recognition
tanmaysinghal@TANMAYs-MBP CS6375_SceneRecognition % python scene_recognition_model.py


******************************** GETTING DATASET ********************************

Requirement already satisfied: kaggle in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (1.5.12)
Requirement already satisfied: terminaltables in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (3.1.10)
Requirement already satisfied: tqdm in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (4.64.0)
Requirement already satisfied: requests in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (2.27.1)
Requirement already satisfied: six>=1.10 in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (1.16.0)
Requirement already satisfied: python-slugify in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (6.1.1)
Requirement already satisfied: urllib3 in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (1.26.9)
Requirement already satisfied: python-dateutil in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (2.8.2)
Requirement already satisfied: certifi in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from kaggle) (2021.10.8)
Requirement already satisfied: text-unidecode>=1.3 in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from python-slugify->kaggle) (1.3)
Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from requests->kaggle) (2.0.12)
Requirement already satisfied: idna<4,>=2.5 in /Users/tanmaysinghal/opt/anaconda3/envs/deep-learning-scene-recognition/lib/python3.10/site-packages (from requests->kaggle) (3.3)
mkdir: /Users/tanmaysinghal/.kaggle: File exists
Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /Users/tanmaysinghal/.kaggle/kaggle.json'
Downloading intel-image-classification.zip to /Users/tanmaysinghal/Downloads/CS6375 ML project/CS6375_SceneRecognition
100%|███████████████████████████████████████▉| 346M/346M [00:13<00:00, 29.9MB/s]
100%|████████████████████████████████████████| 346M/346M [00:13<00:00, 27.4MB/s]

    A class to build a CNN model. 
    
    Attributes:
    n_inputs: Any
        number of inputs to the model (image shape)
    n_outputs: Any
        number of outputs (output neurons)
    val_datas: Any
        validation data

    Methods:
    get_model():
        returns the NeuralNetwork class object.
    
Found 14034 files belonging to 6 classes.
2022-11-28 08:53:39.226303: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
Found 3000 files belonging to 6 classes.
['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street']

******************************** RESCALING AND PREPROCESSING ********************************

After Rescaling (Min, Max):  0.0 1.0

Shape (X train, y train):  (6400, 3, 154, 154) (6400, 6)

******************************** SUMMARY OF CNN MODEL ********************************

+------------------+
| Summary of Model |
+------------------+
Shape of Input: (3, 154, 154)


(8, 1) (8, 3, 2, 2)
(16, 1) (16, 8, 2, 2)
(32, 1) (32, 16, 2, 2)
(64, 1) (64, 32, 2, 2)
(128, 1) (128, 64, 2, 2)
+------------------------------------------------------+------------------+---------------+
| Layer Name                                           | Total Parameters | Output Shape  |
+------------------------------------------------------+------------------+---------------+
| Convolutional2DLayer                                 | 104              | (8, 154, 154) |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (8, 154, 154) |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (8, 77, 77)   |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 528              | (16, 77, 77)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (16, 77, 77)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (16, 38, 38)  |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 2080             | (32, 38, 38)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (32, 38, 38)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (32, 19, 19)  |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 8256             | (64, 19, 19)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (64, 19, 19)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (64, 9, 9)    |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 32896            | (128, 9, 9)   |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (128, 9, 9)   |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (128, 4, 4)   |
|                                                      |                  |               |
| FlattenLayer                                         | 0                | (2048,)       |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 524544           | (256,)        |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (256,)        |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 65792            | (256,)        |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (256,)        |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 1542             | (6,)          |
|                                                      |                  |               |
| Activation/Transfer Function: SoftMaxActivationFunc  | 0                | (6,)          |
|                                                      |                  |               |
+------------------------------------------------------+------------------+---------------+
The sum of all parameters of all layers are: 635742


******************************** MODEL TRAINING ********************************

Epoch No.: 0 === Training model... [ batch:1, time taken:0:00:06 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:2, time taken:0:00:11 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:3, time taken:0:00:16 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:4, time taken:0:00:21 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:5, time taken:0:00:26 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:6, time taken:0:00:30 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:7, time taken:0:00:35 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:8, time taken:0:00:39 ] -> accuracy=0Epoch No.: 0 === Training model... [ batch:9, time taken:0:00:44 ] -> accuEpoch No.: 0 === Training model... [ batch:200, time taken:0:46:37 ] -> accuracy=0.81, loss=0.19=0.45
>>> Training model (loop) complete [ epoch no.:0, time taken: 1:03:07 ] -> train accuracy:0.57, train loss:0.29 | val accuracy:0.69, val loss:0.23


Epoch No.: 1 === Training model... [ batch:200, time taken:0:16:57 ] -> accuracy=0.84, loss=0.14
>>> Training model (loop) complete [ epoch no.:1, time taken: 0:41:22 ] -> train accuracy:0.74, train loss:0.20 | val accuracy:0.74, val loss:0.20


Epoch No.: 2 === Training model... [ batch:200, time taken:0:17:32 ] -> accuracy=0.84, loss=0.14
>>> Training model (loop) complete [ epoch no.:2, time taken: 0:41:16 ] -> train accuracy:0.79, train loss:0.17 | val accuracy:0.76, val loss:0.20


Epoch No.: 3 === Training model... [ batch:200, time taken:0:16:28 ] -> accuracy=0.81, loss=0.13
>>> Training model (loop) complete [ epoch no.:3, time taken: 0:40:04 ] -> train accuracy:0.83, train loss:0.14 | val accuracy:0.75, val loss:0.21


Epoch No.: 4 === Training model... [ batch:200, time taken:0:16:01 ] -> accuracy=0.88, loss=0.11
>>> Training model (loop) complete [ epoch no.:4, time taken: 0:30:06 ] -> train accuracy:0.86, train loss:0.12 | val accuracy:0.75, val loss:0.22


Epoch No.: 5 === Training model... [ batch:200, time taken:0:14:57 ] -> accuracy=0.91, loss=0.10
>>> Training model (loop) complete [ epoch no.:5, time taken: 0:31:41 ] -> train accuracy:0.89, train loss:0.10 | val accuracy:0.75, val loss:0.22


Epoch No.: 6 === Training model... [ batch:200, time taken:0:34:11 ] -> accuracy=0.91, loss=0.08
>>> Training model (loop) complete [ epoch no.:6, time taken: 1:19:36 ] -> train accuracy:0.91, train loss:0.08 | val accuracy:0.75, val loss:0.22


Epoch No.: 7 === Training model... [ batch:200, time taken:0:15:12 ] -> accuracy=0.91, loss=0.07
>>> Training model (loop) complete [ epoch no.:7, time taken: 0:25:02 ] -> train accuracy:0.93, train loss:0.07 | val accuracy:0.75, val loss:0.24


Epoch No.: 8 === Training model... [ batch:200, time taken:0:15:15 ] -> accuracy=0.94, loss=0.06
>>> Training model (loop) complete [ epoch no.:8, time taken: 0:31:32 ] -> train accuracy:0.94, train loss:0.06 | val accuracy:0.73, val loss:0.28


Epoch No.: 9 === Training model... [ batch:200, time taken:0:15:20 ] -> accuracy=0.94, loss=0.06
>>> Training model (loop) complete [ epoch no.:9, time taken: 0:31:29 ] -> train accuracy:0.95, train loss:0.05 | val accuracy:0.73, val loss:0.32


>>> FINAL ACCURACY:0.73 -> Time taken:6:55:20

******************************** MODEL PERFORMANCE AND EVALUATION ********************************


Accuracy of Training Data: 94.71875
Loss of Training Data: 0.05158

Accuracy of Validation Data: 72.60000
Loss of Validation Data: 0.31941
