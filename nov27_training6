(deep-learning-scene-recognition) sohaparasnis@Sohas-Air CS6375_SceneRecognition % python scene_recognition_model.py

******************************** GETTING DATASET ********************************

Requirement already satisfied: kaggle in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (1.5.12)
Requirement already satisfied: terminaltables in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (3.1.10)
Requirement already satisfied: certifi in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (2022.9.24)
Requirement already satisfied: python-slugify in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (7.0.0)
Requirement already satisfied: python-dateutil in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (2.8.2)
Requirement already satisfied: urllib3 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (1.26.12)
Requirement already satisfied: tqdm in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (4.64.1)
Requirement already satisfied: requests in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (2.28.1)
Requirement already satisfied: six>=1.10 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from kaggle) (1.16.0)
Requirement already satisfied: text-unidecode>=1.3 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from python-slugify->kaggle) (1.3)
Requirement already satisfied: charset-normalizer<3,>=2 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from requests->kaggle) (2.1.1)
Requirement already satisfied: idna<4,>=2.5 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from requests->kaggle) (3.4)

[notice] A new release of pip available: 22.3 -> 22.3.1
[notice] To update, run: pip install --upgrade pip
mkdir: /Users/sohaparasnis/.kaggle: File exists
Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /Users/sohaparasnis/.kaggle/kaggle.json'
intel-image-classification.zip: Skipping, found more recently modified local copy (use --force to force download)

    A class to build a CNN model. 
    
    Attributes:
    n_inputs: Any
        number of inputs to the model (image shape)
    n_outputs: Any
        number of outputs (output neurons)
    val_datas: Any
        validation data

    Methods:
    get_model():
        returns the NeuralNetwork class object.
    
Found 14034 files belonging to 6 classes.
2022-11-27 00:33:09.849922: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
Found 3000 files belonging to 6 classes.
['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street']

******************************** RESCALING AND PREPROCESSING ********************************

After Rescaling (Min, Max):  0.0 1.0

Shape (X_train, y_train):  (320, 3, 154, 154) (320, 6)

******************************** SUMMARY OF CNN MODEL ********************************

+------------------+
| Summary of Model |
+------------------+
Shape of Input: (3, 154, 154)


(8, 1) (8, 3, 2, 2)
(16, 1) (16, 8, 2, 2)
(32, 1) (32, 16, 2, 2)
(64, 1) (64, 32, 2, 2)
(128, 1) (128, 64, 2, 2)
+------------------------------------------------------+------------------+---------------+
| Layer Name                                           | Total Parameters | Output Shape  |
+------------------------------------------------------+------------------+---------------+
| Convolutional2DLayer                                 | 104              | (8, 154, 154) |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (8, 154, 154) |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (8, 77, 77)   |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 528              | (16, 77, 77)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (16, 77, 77)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (16, 38, 38)  |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 2080             | (32, 38, 38)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (32, 38, 38)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (32, 19, 19)  |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 8256             | (64, 19, 19)  |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (64, 19, 19)  |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (64, 9, 9)    |
|                                                      |                  |               |
| Convolutional2DLayer                                 | 32896            | (128, 9, 9)   |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (128, 9, 9)   |
|                                                      |                  |               |
| MaximumPoolingLayer                                  | 0                | (128, 4, 4)   |
|                                                      |                  |               |
| FlattenLayer                                         | 0                | (2048,)       |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 524544           | (256,)        |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (256,)        |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 65792            | (256,)        |
|                                                      |                  |               |
| Activation/Transfer Function: ReLuActivationFunc     | 0                | (256,)        |
|                                                      |                  |               |
| FullyConnectedLayer                                  | 1542             | (6,)          |
|                                                      |                  |               |
| Activation/Transfer Function: SoftMaxActivationFunc  | 0                | (6,)          |
|                                                      |                  |               |
+------------------------------------------------------+------------------+---------------+
The sum of all parameters of all layers are: 635742


******************************** MODEL TRAINING ********************************

Training model... [ epoch:0 batch:10 in time:0:00:31 ] -> loss=0.48, accuracy=0.06
Training model (loop) complete [ epoch:0 in time:0:00:40 ] -> train loss:0.90, train accuracy:0.13 | val loss:0.45, val accuracy:0.27


Training model... [ epoch:1 batch:10 in time:0:00:27 ] -> loss=0.44, accuracy=0.06
Training model (loop) complete [ epoch:1 in time:0:00:38 ] -> train loss:0.44, train accuracy:0.24 | val loss:0.40, val accuracy:0.28


Training model... [ epoch:2 batch:10 in time:0:00:27 ] -> loss=0.38, accuracy=0.41
Training model (loop) complete [ epoch:2 in time:0:00:37 ] -> train loss:0.38, train accuracy:0.40 | val loss:0.35, val accuracy:0.47


Training model... [ epoch:3 batch:10 in time:0:00:27 ] -> loss=0.33, accuracy=0.50
Training model (loop) complete [ epoch:3 in time:0:00:36 ] -> train loss:0.33, train accuracy:0.54 | val loss:0.32, val accuracy:0.53


Training model... [ epoch:4 batch:10 in time:0:00:26 ] -> loss=0.28, accuracy=0.62
Training model (loop) complete [ epoch:4 in time:0:00:36 ] -> train loss:0.29, train accuracy:0.57 | val loss:0.33, val accuracy:0.55


Training model... [ epoch:5 batch:10 in time:0:00:28 ] -> loss=0.23, accuracy=0.78
Training model (loop) complete [ epoch:5 in time:0:00:37 ] -> train loss:0.27, train accuracy:0.62 | val loss:0.34, val accuracy:0.53


Training model... [ epoch:6 batch:10 in time:0:00:28 ] -> loss=0.25, accuracy=0.59
Training model (loop) complete [ epoch:6 in time:0:00:39 ] -> train loss:0.27, train accuracy:0.61 | val loss:0.36, val accuracy:0.54


Training model... [ epoch:7 batch:10 in time:0:00:29 ] -> loss=0.20, accuracy=0.78
Training model (loop) complete [ epoch:7 in time:0:00:41 ] -> train loss:0.24, train accuracy:0.66 | val loss:0.30, val accuracy:0.59


Training model... [ epoch:8 batch:10 in time:0:00:30 ] -> loss=0.17, accuracy=0.78
Training model (loop) complete [ epoch:8 in time:0:00:39 ] -> train loss:0.19, train accuracy:0.77 | val loss:0.30, val accuracy:0.62


Training model... [ epoch:9 batch:10 in time:0:00:28 ] -> loss=0.15, accuracy=0.84
Training model (loop) complete [ epoch:9 in time:0:00:39 ] -> train loss:0.16, train accuracy:0.81 | val loss:0.31, val accuracy:0.61


Final accuracy:0.61 -> Time taken:0:06:25

******************************** MODEL PERFORMANCE AND EVALUATION ********************************


Train Accuracy: 80.9375
Validation Accuracy: 60.9375

Train Loss: 0.1646
Validation Loss: 0.3071


(deep-learning-scene-recognition) sohaparasnis@Sohas-Air CS6375_SceneRecognition % 